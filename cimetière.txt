   /**
     * @Rest\Post(
     *    path = "/part",
     *    name = "app_part_create"
     * )
     * @ParamConverter("part", converter="fos_rest.request_body")
     * @ParamConverter("user", converter="fos_rest.request_body")
     * @ParamConverter("cmpt", converter="fos_rest.request_body")
     */
    public function createPart(Request $request,Partenaire $part,Utilisateur $user,Compte $cmpt,ValidatorInterface $validator, ConstraintViolationList $violations, UserPasswordEncoderInterface $passwordEncoder)
    {
        $this->denyAccessUnlessGranted('ROLE_SUPER_ADMIN', null, 'Vous n\'avez accés aux ajout de partenaire');
        
        $user->setPartenaire($part);
        $cmpt->setPartenaire($part);
        $part->setCreatedAt(new \DateTime());
        #$cmpt->setDateDepot(new \DateTime());
        $user->setRoles(["ROLE_SUPER_ADMIN_PARTENAIRE"]);
        $user->setStatut("Actif");
        $num = random_int(100000, 999999);
        $cmpt->setNumero($part->getId()+$cmpt->getId()+$num);
        $user->setPassword($passwordEncoder->encodePassword($user, $user->getPassword()));
       
        if (count($violations)) 
        {
            return $this->view($violations, Response::HTTP_BAD_REQUEST);
        }
        $errors = $validator->validate($user);
        if(count($errors))
        {
            return new Response($errors, 500, [
                'Content-Type' => 'application/json'
            ]);
        }
        $em = $this->getDoctrine()->getManager();
        
        $em->persist($cmpt);
        $em->persist($user);
        $em->persist($part);
        $em->flush();
         return  $this->handleView($this->view('Enregistrement réussi', Response::HTTP_CREATED));
       
    }


    $this->denyAccessUnlessGranted('ROLE_CAISSIER', null, 'Vous n\'êtes pas caissier');

      // public function updateUser(Utilisateur $user,Request $request, ObjectManager $manager, ValidatorInterface $validator,UserPasswordEncoderInterface $encoder)
    // {
      
    //         if(!$user){
    //             throw new HttpException(404,'Cet utilisateur n\'existe pas !');
    //         }
    //         $form = $this->createForm(UtilisateurType::class,$user);
    //         $data=json_decode($request->getContent(),true);//si json
    //         if(!$data){
    //             $data=$request->request->all();//si non json
    //         }
    //         $ancienNom=$user->getImage();//pour le supprimer
            
    //         $form->submit($data);
    //         if(!$form->isSubmitted() || !$form->isValid()){
    //             return $this->handleView($this->view($validator->validate($form)));
    //         }
    //         if($requestFile=$request->files->all()){
    //             $file=$requestFile['image'];
    //             if($file->guessExtension()!='png' && $file->guessExtension()!='jpeg'){
    //                 throw new HttpException(400,'Entrer une image valide !! ');
    //             }
    //             $fileName=md5(uniqid()).'.'.$file->guessExtension();//on change le nom du fichier
    //             $user->setImage($fileName);
    //             $file->move($this->getParameter($this->image_directory),$fileName); //definir le image_directory dans service.yaml
    //             $ancienPhoto=$this->getParameter($this->image_directory)."/".$ancienNom;
    //             if($ancienNom){
    //                unlink($ancienPhoto);//supprime l'ancienne 
    //             }
    //         }
    //         $hash=$encoder->encodePassword($user, $user->getPassword());
    //         $user->setPassword($hash);
    //         $manager->persist($user); 
    //         $manager->flush();
    //         $afficher = [
    //             $this->status => 200,
    //             $this->message => 'L\'utilisateur a été correctement modifié !'
    //         ];
    //         return $this->handleView($this->view($afficher,Response::HTTP_OK));
    // }

      /**
     * @Rest\Post(
     *    path = "/adduser",
     *    name = "app_user_admin_create"
     * )
     *  @ParamConverter("user", converter="fos_rest.request_body")
     */
    public function addUser(Request $request,Utilisateur $user,ConstraintViolationList $violations, UserPasswordEncoderInterface $passwordEncoder,ValidatorInterface $validator)
    {
        $user->setRoles(['ROLE_ADMIN']);
        $user->setStatut("Actif");
    
        $user->setPassword($passwordEncoder->encodePassword($user, $user->getPassword()));
        
        if (count($violations))
        {
            return $this->view($violations, Response::HTTP_BAD_REQUEST);
        }
        $errors = $validator->validate($user);
        
        if(count($errors))
        {
            return new Response($errors, 500, [
                'Content-Type' => 'application/json'
            ]);
        }
        $part= $this->getUser()->getPartenaire();
        
        if($part)
        {
            $user->setPartenaire($part);
        }
        else{
            $user->setPartenaire(null);
        }

        $em = $this->getDoctrine()->getManager();
        $em->persist($user);
        $em->flush();
        return $this->view('Utilisateur ajouté', Response::HTTP_CREATED, ['Content-Type' => 'application/json']);
      
    }

     /** 
    * @Rest\View(StatusCode = 200)
    * @Rest\Put(
    *    path = "/statut/{id}",
    *    name = "app_part_modif"
    * )
    * @ParamConverter("newparte", converter="fos_rest.request_body")
    */
    public function editpart(Utilisateur $parte,Utilisateur $newparte, ConstraintViolationList $violations)
    {
        $this->denyAccessUnlessGranted('ROLE_SUPER_ADMIN', null, 'Vous n\'avez pas accés aux Blocage d\'utilisateur');
        if (count($violations))
        {
            return $this->view($violations, Response::HTTP_BAD_REQUEST);
        }

        $parte->setStatut($newparte->getStatut());
        $em = $this->getDoctrine()->getManager();
        $em->flush();
     
        return  $this->handleView($this->view('Statut changé', Response::HTTP_CREATED));
    }

         
    /**
     * @Rest\Post(
     *      path = "/comptes/{id}",
     *      name = "new_compte"
     * )
     * @ParamConverter("cmpt", converter="fos_rest.request_body")
     */
    public function addCompte(Compte $cmpt,Partenaire $part,ValidatorInterface $validator)
    {
       # $this->denyAccessUnlessGranted('ROLE_SUPER_ADMIN', null, 'Vous n\'avez accés aux ajout de partenaire');
        $errors = $validator->validate($cmpt);
        if(count($errors))
        {
            return new Response($errors, 500, [
                'Content-Type' => 'application/json'
            ]);
        }
        
       
       
        $num = random_int(100000, 999999);
        $cmpt->setNumero($part->getId()+$cmpt->getId()+$num);
        $cmpt->setDateDepot(new \DateTime());
        $cmpt->setPartenaire($part);
        $em = $this->getDoctrine()->getManager();
        $em->persist($cmpt);
        $em->flush();

        return  $this->handleView($this->view('Compte ajouté avec succés', Response::HTTP_CREATED));
    }
    